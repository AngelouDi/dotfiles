(defpoll interfaceId :interval "60s" "route | grep default | head -n1 | awk '{print $8}'")
(defvar music_hover false)
(defvar mem_hover false)
(defvar temp_hover false)
(defvar cpu_hover false)
(defvar time_hover false)
(defvar brightness_hover false)
(defvar volume_hover false)

(defpoll time :interval "1s"
    `date '+{"date":"%d/%m/%y","time":"%H:%M:%S"}'`
)

(defpoll cur_brighness :interval "0.1s"
    :initial `light -G`
    :run-while brightness_hover 
    `light -G`
)

(defpoll cur_volume :interval "0.1s"
    :initial `pamixer --get-volume`
    :run-while  volume_hover
    `pamixer --get-volume`
)

(deflisten song 
    :initial '{"title":"Title","album":"Album","artist":"Artist",status:"Paused",volume:10,"cover":"CoverUrl","length:100000000","flength":"0:00"}'
    `playerctl --follow metadata --format '\{"title":"{{title}}","album":"{{album}}","artist":"{{artist}}","status":"{{status}}","volume":{{volume}},"cover":"{{mpris:artUrl}}","length":"{{mpris:length}}","flength":"{{duration(mpris:length)}}"\}'`
)



(defpoll song_cover
    :interval "4s"
    :initial ""
    :run-while {song.status == "Playing"}
    `scripts/cover_fetch`
)

(defpoll song_pos
    :initial 0
    :interval "1s"
    :run-while {song.status == "Playing"}
    `playerctl position`)
    
(defpoll fsong_pos
    :initial 0
    :interval "1s"
    :run-while {song.status != ""}
    `playerctl position --format '{{duration(position)}}'`)

(defwidget bar_w []
    (box
        :orientation "h"
    (left)
    (center)
    (right)
    )
)

(defwidget player []
    (box
        :orientation "h"
        :halign "center"
        :valign "center"
        :class "player"
        :spacing 10
        :space-evenly "false"
        :visible {song.status != ""}
        (eventbox
            :onhover "eww update music_hover=true"
            :onhoverlost "eww update music_hover=false"
            :onclick "playerctl play-pause"
            :onrightclick "eww open music_player"
            (box
            :space-evenly "false"
                (label
                    :class "play-btn"
                    :text {song.status == "Playing" ? "‚è∏ " :"‚ñ∂Ô∏è" }
                )
                (label 
                    :class "song-name"
                    :limit-width 40 
                    :text "${song.title} "
                )
                (revealer
                    :transition "slideleft"
                    :reveal music_hover
                    :duration "500ms"
                    (label 
                        :class "song-name"
                        :text " ~ ${song.artist}"
                    )
                )
            )
        )
    )
)

(defwidget left []
    (box 
        :class "bar-panel"
        :orientation "h" 
        :space-evenly false  
        :spacing 15
        :halign "start"
        (net)
        (temp)
        (cpu)
    )
)

(defwidget temp []
    (eventbox
        :onhover "eww update temp_hover=true"
        :onhoverlost "eww update temp_hover=false"
        (box
            :space-evenly false
            :spacing 2 
            (label :class "temp-icn" :text "üå°")
            (revealer
                :transition "slideright"
                :reveal temp_hover
                :duration "250ms"
                (box
                    :space-evenly false
                    (label :class "temp-mb" :text {'MB: '+ EWW_TEMPS["ACPITZ_TEMP1"] + "¬∞C" })
                    (label :class "separator" :text "|")
                )
            )
            (label :class "temp-cpu" :text {'CPU: ' +EWW_TEMPS["AMDGPU_EDGE"]  + "¬∞C"})

        )
    )
)

(defwidget center []
    (box 
        :orientation "h" 
        :space-evenly false  
        :halign "center"
        (player)
    )
)

(defwidget cpu []
    (eventbox
        :onhover "eww update cpu_hover=true"
        :onhoverlost "eww update cpu_hover=false"
        (box
            :space-evenly false
            :spacing 2 
            (label :class "cpu-icn" :text "Ôò™")
            (revealer
                :transition "slideright"
                :reveal cpu_hover
                :duration "250ms"
                (box
                    :space-evenly false
                    (label :class "temp-mb" :text {EWW_CPU["cores"][0].usage 
                    + " " + EWW_CPU["cores"][1].usage
                    + " " + EWW_CPU["cores"][2].usage
                    + " " + EWW_CPU["cores"][3].usage
                    + " " + EWW_CPU["cores"][4].usage
                    + " " + EWW_CPU["cores"][5].usage}
                    )
                    (label :class "separator" :text "|")
                )
            )
            (label :class "temp-cpu" :text {round(EWW_CPU.avg,2) + "%"})

        )
    )
)

(defwidget right []
    (box 
        :orientation "h" 
        :halign "end"
        :space-evenly false  
        :spacing 10
        (right_sliders)
        (cpu_mem)
        (time_w)
    )
)

(defwidget cpu_mem []
    (box
        :class "bar-panel"
        :space-evenly false  
        :halign "end"
        :spacing 8
        (bat)
        (mem)
    )
)

(defwidget net []
    (box
        :space-evenly false
        :spacing 10
        (box
            :space-evenly false
            (label :class "down-arrow" :text "‚¨á")
            (label :class "net-stat" :text "${round(EWW_NET[interfaceId].NET_DOWN*4/1024/1024,2)}")
        )
        (box
            :space-evenly false
            (label :class "up-arrow" :text "‚¨Ü")
            (label :class "net-stat" :text "${round(EWW_NET[interfaceId].NET_UP*4/1024/1024,2)}")
        )
    )
)


(defwidget bat []
    (box :class "bat_module" :vexpand "false" :hexpand "false" 
        (circular-progress :value {EWW_BATTERY.BATT.capacity}
            :class { EWW_BATTERY.BATT.status == "Charging" ? "bat-chrg" :
                    EWW_BATTERY.BATT.capacity > 10 ? "bat-good" : "bat-low" }
            :start-at 1
            :thickness 3
            (label 
                :limit-width 2
                :text { EWW_BATTERY.BATT.status == "Charging" ? "üîå" :
                        EWW_BATTERY.BATT.capacity }
                :class { EWW_BATTERY.BATT.status == "Charging" ? "bat-chrg" :
                        EWW_BATTERY.BATT.capacity > 10 ? "bat-good" : "bat-low" }
            )
        )
    )
)

(defwidget mem []
    (eventbox
        :onhover "eww update mem_hover=true"
        :onhoverlost "eww update mem_hover=false"
        (box :class "mem_module" :vexpand "false" :hexpand "false" 
            :space-evenly false
            (revealer
                :transition "slideleft"
                :reveal mem_hover
                :duration "250ms"
                (label 
                    :text {round(EWW_RAM.used_mem/(1000000000),2) + "/" + round(EWW_RAM.total_mem/(1000000000),2) + " " + "GB"} 
                )
            )
            (circular-progress :value {EWW_RAM.used_mem / EWW_RAM.total_mem * 100}
                :class "mem_module" 
                :start-at 1
                :thickness 3
                (label 
                    :class "mem_module" 
                    :text {round(EWW_RAM.used_mem / EWW_RAM.total_mem * 100, 0)} 
                )
            )
        )
    )
)

(defwidget right_sliders []
    (box
        :class "bar-panel"
        :space-evenly false  
        :halign "end"
        :spacing 8
        (volume)
        (brightness)
    )
)

(defwidget brightness []
    (eventbox
        :onhover "eww update brightness_hover=true"
        :onhoverlost "eww update brightness_hover=false"
        (box
        :class "brightness"
            :space-evenly false
            (label :class "sun" :text "‚òÄ")
            (revealer
                :transition "slideright"
                :reveal brightness_hover
                (scale 
                    :min 0
                    :max 100
                    :value {cur_brighness}
                    :active "true"
                    :onchange "light -S {}" 
                )
            )
        )
    )
)

(defwidget volume []
    (eventbox
        :onhover "eww update volume_hover=true"
        :onhoverlost "eww update volume_hover=false"
        (box
        :class "volume"
            :space-evenly false
            :spacing 10
            (label :class "audio" :text {cur_volume > 0? "üîä": "üîá"})
            (revealer
                :transition "slideright"
                :reveal volume_hover
                (scale 
                    :min 0
                    :max 100
                    :value {cur_volume}
                    :active "true"
                    :onchange "pamixer --set-volume {}" 
                )
            )
        )
    )
)

(defwidget time_w []
    (eventbox
        :onhover "eww update time_hover=true"
        :onhoverlost "eww update time_hover=false"
        :onclick "eww open cal_window"
        (box
            :class "bar-panel"
            (label :class "time" :visible {!time_hover} :text {'ÔÄó ' + time.time})
            (label :class "time" :visible {time_hover} :text {'ÔÅ≥ ' + time.date })
        )
    )
)

(defwindow bar
    :geometry (geometry :x "0%"
                :y "0%"
                :width "98%"
                :height "30px"
                :anchor "top center")
    :stacking "fg"
    :windowtype "dock"
    :exclusive true
    :monitor 0

    (bar_w)
)

(defwidget popup []
    (eventbox
    :onhoverlost "eww close music_player"
        (box
            :class "popup"
            :orientation "h"
            :space-evenly false
            :hexpand false
            :vexpand false
            :spacing 20
            (box 
                :hexpand false
                :vexpand false
                :class "music_cover" 
                :style 'background-image: url("${song_cover}")')
            (box 
                :orientation "v" 
                :space-evenly false
                :hexpand true
                (label :class "song_title" :limit-width 25 :wrap true :text "${song.title}")
                (label :class "song_artist" :limit-width 25 :wrap true :text "${song.artist}")
                (label :class "song_album" :limit-width 25 :wrap true :text "${song.album}")
                    (box
                        :orientation "h"
                        :halign "center"
                        :space-evenly false
                        :style "padding: 10px;"
                        (button 
                            :onclick "playerctl previous"
                            "‚èÆ"
                        )
                        (label :class "timestamp" :text "${fsong_pos}/${song.flength}")
                        (button 
                            :onclick "playerctl play-pause"
                            :class "play-btn"
                            {song.status == "Playing" ? "‚è∏ " :"‚ñ∂Ô∏è" }
                        )
                        (button 
                            :onclick "playerctl next"
                            "‚è≠Ô∏è"
                        )
                    )
                    (scale
                        :min 0
                        :max 100
                        :value {(song_pos * 100000000) / song.length}
                        :active "true"
                        :onchange "playerctl position $(( ({} * ${song.length} )/100000000 ))"
                    )
            )
        )
    )
)

(defwindow music_player
    :geometry (geometry :x "0%"
                :y "0%"
                :width "480px"
                :height "104px"
                :anchor "top center")
    :stacking "fg"
    :windowtype "dock"
    :monitor 0

    (popup)
)

(defwidget cal_w []
    (eventbox
        :onhoverlost "eww close cal_window"
        (calendar)
    )
)

(defwindow cal_window
    :geometry (geometry :x "0%"
                :y "1%"
                :anchor "top right")
    :stacking "fg"
    :windowtype "dock"
    :monitor 0

    (cal_w)
)

